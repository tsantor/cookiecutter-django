log:
  level: INFO

api:
  dashboard: true

{%- if cookiecutter.use_prometheus == 'y' %}

metrics:
  prometheus:
    addEntryPointsLabels: true
    addRoutersLabels: true
    addServicesLabels: true
{%- endif %}

accessLog:
  filePath: /var/log/access.log
  bufferingSize: 100

entryPoints:
  web:
    # http
    address: ':80'
    http:
      # https://doc.traefik.io/traefik/routing/entrypoints/#entrypoint
      redirections:
        entryPoint:
          to: web-secure

  web-secure:
    # https
    address: ':443'
  {%- if cookiecutter.use_celery == 'y' %}

  flower:
    address: ':5555'
  {%- endif %}

  {%- if cookiecutter.use_mosquitto == 'y' %}
<<<<<<< HEAD
  mqtt:
    address: ':1883'
=======
>>>>>>> master

  mqtt-secure:
    address: ':8883'
  {%- endif %}

certificatesResolvers:
  letsencrypt:
    # https://doc.traefik.io/traefik/https/acme/#lets-encrypt
    acme:
      email: '{{ cookiecutter.email }}'
      storage: /etc/traefik/acme/acme.json
      # https://doc.traefik.io/traefik/https/acme/#httpchallenge
      httpChallenge:
        entryPoint: web

http:
  routers:
    web-secure-router:
      {%- if cookiecutter.domain_name.count('.') == 1 %}
      rule: 'Host(`{{ cookiecutter.domain_name }}`) || Host(`www.{{ cookiecutter.domain_name }}`)'
      {%- else %}
      rule: 'Host(`{{ cookiecutter.domain_name }}`)'
      {%- endif %}
      entryPoints:
        - web-secure
      middlewares:
        - csrf
      service: django
      tls:
        # https://doc.traefik.io/traefik/routing/routers/#certresolver
        certResolver: letsencrypt
    {%- if cookiecutter.use_celery == 'y' %}

    flower-secure-router:
      rule: 'Host(`{{ cookiecutter.domain_name }}`)'
      entryPoints:
        - flower
      service: flower
      tls:
        # https://doc.traefik.io/traefik/master/routing/routers/#certresolver
        certResolver: letsencrypt
    {%- endif %}
    {%- if cookiecutter.cloud_provider == 'None' %}

    web-media-router:
      {%- if cookiecutter.domain_name.count('.') == 1 %}
      rule: '(Host(`{{ cookiecutter.domain_name }}`) || Host(`www.{{ cookiecutter.domain_name }}`)) && PathPrefix(`/media/`)'
      {%- else %}
      rule: 'Host(`{{ cookiecutter.domain_name }}`) && PathPrefix(`/media/`)'
      {%- endif %}
      entryPoints:
        - web-secure
      middlewares:
        - csrf
      service: django-media
      tls:
        certResolver: letsencrypt
    {%- endif %}
    {%- if cookiecutter.use_whitenoise == 'n' %}

<<<<<<< HEAD
    {%- if cookiecutter.use_whitenoise == 'n' %}

    web-static-router:
      rule: 'Host(`{{ cookiecutter.domain_name }}`) && (PathPrefix(`/static/`) || PathPrefix(`/docs/`))'
      entryPoints:
        - web-secure
      middlewares:
        - csrf
=======
    web-static-router:
      rule: 'Host(`{{ cookiecutter.domain_name }}`) && PathPrefix(`/static/`)'
      entryPoints:
        - web-secure
      middlewares:
        - security-headers
      service: django-static
      tls:
        certResolver: letsencrypt

    docs-static-router:
      rule: 'Host(`{{ cookiecutter.domain_name }}`) && PathPrefix(`/docs/`)'
      entryPoints:
        - web-secure
      middlewares:
>>>>>>> master
        - security-headers
      service: django-static
      tls:
        certResolver: letsencrypt
    {%- endif %}
<<<<<<< HEAD

    {%- if cookiecutter.use_mosquitto == 'y' %}

    mqtt-secure-router:
      rule: 'Host(`{{ cookiecutter.domain_name }}`) && PathPrefix(`/mqtt`)'
      entryPoints:
        - web-secure
      service: mqtt
      tls:
        certResolver: letsencrypt

=======
    {%- if cookiecutter.use_mosquitto == 'y' %}

    mqtt-secure-router:
      rule: 'Host(`{{ cookiecutter.domain_name }}`) && PathPrefix(`/mqtt`)'
      entryPoints:
        # - mqtt-secure
        - web-secure
      service: mqtt
      tls:
        certResolver: letsencrypt
    {%- endif %}

    dashboard-secure-router:
      rule: "Host(`traefik.{{ cookiecutter.domain_name }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      entryPoints:
        - web-secure
      middlewares:
        - dashboard-user
      service: api@internal
      tls:
        certResolver: letsencrypt

    {%- if cookiecutter.use_prometheus == 'y' %}

    prometheus-secure-router:
      # https://doc.traefik.io/traefik/observability/metrics/overview/
      rule: "Host(`prometheus.{{ cookiecutter.domain_name }}`)"
      entryPoints:
        - web-secure
      middlewares:
        - dashboard-user
      service: prometheus
      tls:
        certResolver: letsencrypt
    {%- endif %}

    {%- if cookiecutter.use_grafana == 'y' %}

    grafana-secure-router:
      rule: 'Host(`grafana.{{ cookiecutter.domain_name }}`)'
      entryPoints:
        - web-secure
      middlewares:
        - dashboard-user
      service: grafana
      tls:
        certResolver: letsencrypt
>>>>>>> master
    {%- endif %}

  middlewares:
    csrf:
      # https://doc.traefik.io/traefik/master/middlewares/http/headers/#hostsproxyheaders
      # https://docs.djangoproject.com/en/dev/ref/csrf/#ajax
      headers:
        hostsProxyHeaders: ['X-CSRFToken']

    dashboard-user:
      basicAuth:
        usersFile: /etc/traefik/.htpasswd

    {%- if cookiecutter.use_whitenoise == 'n' %}

    security-headers:
      headers:
        # browserXssFilter: true
        customBrowserXSSValue: 0
        contentTypeNosniff: true
        frameDeny: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 2592000
        referrerPolicy: 'same-origin'
        contentSecurityPolicy: "default-src 'self' data: 'unsafe-inline'; script-src 'self' 'unsafe-inline' player.vimeo.com connect.facebook.net cdn.jsdelivr.net maxcdn.bootstrapcdn.com *.typekit.net; style-src 'self' 'unsafe-inline' fonts.googleapis.com cdn.jsdelivr.net maxcdn.bootstrapcdn.com *.typekit.net; img-src 'self' data: cdn.jsdelivr.net; font-src 'self' fonts.gstatic.com maxcdn.bootstrapcdn.com *.typekit.net; connect-src 'self' wss: o300282.ingest.sentry.io; media-src 'self' player.vimeo.com; frame-src player.vimeo.com; worker-src blob:; form-action 'self'; upgrade-insecure-requests; block-all-mixed-content; base-uri 'self'"
        permissionsPolicy: 'accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()'
    {%- endif %}

  services:
    django:
      loadBalancer:
        servers:
          - url: http://django:5000
    {%- if cookiecutter.use_celery == 'y' %}

    flower:
      loadBalancer:
        servers:
          - url: http://flower:5555
    {%- endif %}
    {%- if cookiecutter.cloud_provider == 'None' %}

    django-media:
      loadBalancer:
        servers:
          - url: http://nginx:80
    {%- endif %}
    {%- if cookiecutter.use_whitenoise == 'n' %}

    django-static:
      loadBalancer:
        servers:
          - url: http://nginx:80
    {%- endif %}
    {%- if cookiecutter.use_mosquitto == 'y' %}

    mqtt:
      loadBalancer:
        servers:
          - url: http://mosquitto:9001
    {%- endif %}
    {%- if cookiecutter.use_prometheus == 'y' %}

    prometheus:
      loadBalancer:
        servers:
          - url: http://prometheus:9090
    {%- endif %}
    {%- if cookiecutter.use_grafana == 'y' %}

    grafana:
      loadBalancer:
        servers:
          - url: http://grafana:3000
    {%- endif %}

{%- if cookiecutter.use_mosquitto == 'y' %}

tcp:
  routers:
    mqtt-tcp-router:
      rule: 'HostSNI(`*`)'
      entryPoints:
        - mqtt
      service: mqtt-tcp-service

    mqtt-tcp-secure-router:
      rule: 'HostSNI(`{{ cookiecutter.domain_name }}`)'
      entryPoints:
        - mqtt-secure
      service: mqtt-tcp-secure-service
      tls:
        certResolver: letsencrypt

  services:
    mqtt-tcp-service:
      loadBalancer:
        servers:
          - address: mosquitto:1883

    mqtt-tcp-secure-service:
      loadBalancer:
        servers:
          - address: mosquitto:1883
{%- endif %}

providers:
  # https://doc.traefik.io/traefik/master/providers/file/
  file:
    filename: /etc/traefik/traefik.yml
    watch: true
