# [program:{{ cookiecutter.project_user }}_gunicorn]
# command=/home/vagrant/project/utility/vagrant/gunicorn-start.sh
# user=vagrant
# umask=0022
# autostart=true
# autorestart=true
# startsecs=3

# stderr_logfile=/home/vagrant/project/logs/%(program_name)s_stderr.log
# stdout_logfile=/home/vagrant/project/logs/%(program_name)s_stdout.log
# redirect_stderr=true

# [program:nginx]
# command=/usr/sbin/nginx -g "daemon off;"
# autostart=true
# autorestart=true
# startretries=5
# numprocs=1
# startsecs=0
# ; process_name=%(program_name)s_%(process_num)02d

# stderr_logfile=/home/vagrant/project/logs/%(program_name)s_stderr.log
# stdout_logfile=/home/vagrant/project/logs/%(program_name)s_stdout.log
# redirect_stderr=true

[program:{{ cookiecutter.project_user }}_celery_worker]
environment=DJANGO_SETTINGS_MODULE=config.settings.production
command=/home/vagrant/env/bin/celery -A config.celery_app worker -l info
directory=/home/vagrant/{{ cookiecutter.project_slug }}

stderr_logfile=/home/vagrant/project/logs/%(program_name)s_stderr.log
stdout_logfile=/home/vagrant/project/logs/%(program_name)s_stdout.log
redirect_stderr=true

autostart=true
autorestart=true
startsecs=3
user=vagrant
numprocs=1

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs=600

; When resorting to send SIGKILL to the program to terminate it
; send SIGKILL to its whole process group instead,
; taking care of its children as well.
killasgroup=true
stopasgroup=true

; Set Celery priority higher than default (999)
; so, if rabbitmq is supervised, it will start first.
priority=1000
